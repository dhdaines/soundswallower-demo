{"version":3,"file":"src_recognizer_js.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,mBAAO,CAAC,wFAAgC;AAClE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,mBAAO,CAAC,uEAAgB;AACzC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;;;;;;;;;;;AC9GA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;;;;WClCA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;;;;;WCRA;WACA;WACA;WACA;WACA;;;;;WCJA;;;;;WCAA;;;;;WCAA;;WAEA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,aAAa;WACb;WACA;WACA;WACA;;WAEA;WACA;WACA;;WAEA;;WAEA;;;;;WCpCA;WACA;WACA;WACA;;;;;UEHA;UACA","sources":["webpack://soundswallower-demo/./src/recognizer.js","webpack://soundswallower-demo/ignored|/home/dhd/work/soundswallower-demo/node_modules/soundswallower|crypto","webpack://soundswallower-demo/ignored|/home/dhd/work/soundswallower-demo/node_modules/soundswallower|fs","webpack://soundswallower-demo/ignored|/home/dhd/work/soundswallower-demo/node_modules/soundswallower|path","webpack://soundswallower-demo/webpack/bootstrap","webpack://soundswallower-demo/webpack/runtime/chunk loaded","webpack://soundswallower-demo/webpack/runtime/ensure chunk","webpack://soundswallower-demo/webpack/runtime/get javascript chunk filename","webpack://soundswallower-demo/webpack/runtime/hasOwnProperty shorthand","webpack://soundswallower-demo/webpack/runtime/publicPath","webpack://soundswallower-demo/webpack/runtime/importScripts chunk loading","webpack://soundswallower-demo/webpack/runtime/startup chunk dependencies","webpack://soundswallower-demo/webpack/before-startup","webpack://soundswallower-demo/webpack/startup","webpack://soundswallower-demo/webpack/after-startup"],"sourcesContent":["// Copyright (c) 2022 David Huggins-Daines <dhdaines@gmail.com>\n// Originally based on recognizer.js from pocketsphinx.js, which is:\n// Copyright Â© 2013-2017 Sylvain Chevalier\n// MIT license, see LICENSE for details\n\nvar ssjs;\nvar recognizer = null;\nconst registerWebWorker = require('webworker-promise/lib/register');\nregisterWebWorker(onMessage);\n\nasync function onMessage(message) {\n    if (message.command != \"initialize\" && recognizer == null)\n\tthrow new Error(\"Decoder not yet initialized\");\n    switch(message.command) {\n    case 'initialize':\n\treturn initialize(message.data);\n    case 'addWords':\n\treturn addWords(message.data);\n    case 'loadDict':\n\treturn loadDict(message.data);\n    case 'setGrammar':\n\treturn setGrammar(message.data);\n    case 'loadGrammar':\n\treturn loadGrammar(message.data);\n    case 'start':\n\treturn start(message.data);\n    case 'stop':\n\treturn stop();\n    case 'process':\n\treturn process(message.data);\n    }\n}\n\nasync function initialize(config) {\n    ssjs = await require(\"soundswallower\")()\n    recognizer = new ssjs.Decoder(config);\n    await recognizer.initialize();\n}\n\nasync function start() {\n    await recognizer.start();\n}\n\nasync function stop() {\n    await recognizer.stop();\n    let hyp = recognizer.get_hyp();\n    let hypseg = recognizer.get_hypseg();\n    return {hyp: hyp, hypseg: hypseg};\n}\n\nasync function addWords(words) {\n    let rv;\n    for (const i in words) {\n\tvar w = words[i];\n\tif (w.length == 2) {\n\t    rv = await recognizer.add_word(w[0], w[1], (i == words.length - 1));\n\t    if (rv == -1)\n\t\tbreak;\n\t}\n    }\n    if (rv == -1)\n\tthrow new Error(\"Failed to add words to recognizer\");\n}\n\nasync function loadDict(dict_url) {\n    let response = await fetch(dict_url);\n    if (response.ok) {\n\tlet dict_string = await response.text();\n\tlet re = /^(\\S+)\\s+(.*)$/mg;\n\tfor (const m of dict_string.trim().matchAll(re)) {\n\t    // Fancy way to tell if this is the last line\n\t    let end = m.index + m[0].length;\n\t    let rv = await recognizer.add_word(m[1], m[2],\n\t\t\t\t\t       end == dict_string.length);\n\t    if (rv == -1)\n\t\tthrow new Error(\"Failed to add word \"\n\t\t\t\t+ m[1] + \" with pronunciation \" + m[2]);\n\t}\n    }\n    else\n\tthrow new Error(\"Failed to fetch \" + dict_url + \" :\"\n\t\t\t+ response.statusText);\n}\n\nasync function setGrammar(grammar) {\n    let fsg = recognizer.create_fsg(\"_default\",\n\t\t\t\t    grammar.start, grammar.end,\n\t\t\t\t    grammar.transitions);\n    await recognizer.set_fsg(fsg);\n    fsg.delete();\n}\n\nasync function loadGrammar(grammar_url) {\n    let response = await fetch(grammar_url);\n    if (response.ok) {\n\tlet jsgf_string = await response.text();\n\tlet fsg = recognizer.parse_jsgf(jsgf_string);\n\tawait recognizer.set_fsg(fsg);\n\tfsg.delete();\n    }\n    else\n\tthrow new Error(\"Failed to fetch \" + grammar_url + \" :\"\n\t\t\t+ response.statusText);\n}\n\nasync function process(array) {\n    var output = await recognizer.process_raw(array);\n    let hyp = recognizer.get_hyp();\n    let hypseg = recognizer.get_hypseg();\n    return {hyp: hyp, hypseg: hypseg};\n}\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendors-node_modules_soundswallower_soundswallower_js-node_modules_webworker-promise_lib_regi-5a417e\"], () => (__webpack_require__(\"./src/recognizer.js\")))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.p = \"/soundswallower-demo/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t\"src_recognizer_js\": 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunksoundswallower_demo\"] = self[\"webpackChunksoundswallower_demo\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(\"vendors-node_modules_soundswallower_soundswallower_js-node_modules_webworker-promise_lib_regi-5a417e\").then(next);\n};","","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n",""],"names":[],"sourceRoot":""}